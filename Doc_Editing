import tkinter as tk
from tkinter import filedialog
from docx import Document
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.shared import Pt

class DocxEditor:
    def __init__(self, root):
        self.root = root
        self.document = None
        self.file_path = None
        
        # Create the buttons
        self.bold_button = tk.Button(root, text="Bold", command=self.toggle_bold)
        self.italic_button = tk.Button(root, text="Italic", command=self.toggle_italic)
        self.underline_button = tk.Button(root, text="Underline", command=self.toggle_underline)
        self.save_button = tk.Button(root, text="Save", command=self.save_file)
        
        # Create the text editor
        self.text_editor = tk.Text(root)
        self.text_editor.config(font=("Arial", 12))
        
        # Add the buttons and text editor to the root window
        self.bold_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.italic_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.underline_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.save_button.pack(side=tk.RIGHT, padx=5, pady=5)
        self.text_editor.pack(fill=tk.BOTH, expand=True)
        
    def toggle_bold(self):
        self.text_editor.tag_configure("bold", font=("Arial", 12, "bold"))
        current_tags = self.text_editor.tag_names("sel.first")
        if "bold" in current_tags:
            self.text_editor.tag_remove("bold", "sel.first", "sel.last")
        else:
            self.text_editor.tag_add("bold", "sel.first", "sel.last")
            
    def toggle_italic(self):
        self.text_editor.tag_configure("italic", font=("Arial", 12, "italic"))
        current_tags = self.text_editor.tag_names("sel.first")
        if "italic" in current_tags:
            self.text_editor.tag_remove("italic", "sel.first", "sel.last")
        else:
            self.text_editor.tag_add("italic", "sel.first", "sel.last")
            
    def toggle_underline(self):
        self.text_editor.tag_configure("underline", font=("Arial", 12, "underline"))
        current_tags = self.text_editor.tag_names("sel.first")
        if "underline" in current_tags:
            self.text_editor.tag_remove("underline", "sel.first", "sel.last")
        else:
            self.text_editor.tag_add("underline", "sel.first", "sel.last")
            
    def save_file(self):
        text_content = self.text_editor.get(1.0, tk.END)
        if self.file_path:
            self.document = Document()
            self.document.add_paragraph(text_content)
            self.document.save(self.file_path)
        else:
            self.save_file_as()
            
    def save_file_as(self):
        text_content = self.text_editor.get(1.0, tk.END)
        self.file_path = filedialog.asksaveasfilename(defaultextension=".docx")
        if self.file_path:
            self.document = Document()
            self.document.add_paragraph(text_content)
            self.document.save(self.file_path)

# Create the root window
root = tk.Tk()
root.title("DOCX Editor")
root.geometry("800x600")

# Create an instance of the DocxEditor class
editor = DocxEditor(root)

# Start the tkinter event loop
root.mainloop()


# Now save the document to a locationv"C:\Users\DELL\OneDrive\Desktop\unity_server"
